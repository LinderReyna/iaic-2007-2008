package gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

import micromundo.CargarEdificio;
import micromundo.EdificioCubico;
import programa.Controlador;

/**
 * Interfaz grafica
 * @author Miguel Angel Díaz
 * @author David Martín
 * @author Alberto Vaquero
 */
public class Visual extends javax.swing.JFrame {
	
	/**
	 * Dimension maxima del edificio
	 */
	public static final int DIMENSION_MAXIMA = 5;
    
    /**
     * Autogenerated serialVersionUID
     */
	private static final long serialVersionUID = 4854326049449294658L;
    
    /**
     * Titulo de la ventana por defecto
     */
	private static final String titulo = "Practica 1 IAIC:    Diaz_Martin_Vaquero";
    
	/**
	 * Numero de habitaciones
	 */
	private int n;
	
	/**
	 * Profundidad del cubo representada
	 */
    private int z;
    
    /**
     * Referencia al controlador
     */
    private Controlador controlador;
    
    /**
     * Este string sirve para hacer print sobre la consola de la interfaz
     */
    private String mensaje = "";
    
    /**
     * Indica si se ha cargado un archivo de entrada
     */
    private boolean cargado;
    
    /**
     * Nombre del archivo cargado
     */
    private String nombreArchivoCargado;
    
    /**
     * ArrayList con las coordenadas del camino de salida del EdificioCubico
     */
    private ArrayList<int[]> salida;
    
    /**
     * Atributos de la ventana
     */
    private javax.swing.JTextField edificio[][];//aqui se verá reflejado el edificio
    private javax.swing.JTextField textoProfAct;
    private javax.swing.JTextField textoAlgoritmo;
    private javax.swing.JButton botonZoomMas;
    private javax.swing.JButton botonZoomMenos;
    private javax.swing.JButton botonAbrir;
    private javax.swing.JButton botonEjecutar;
    private javax.swing.JCheckBox checkBoxProf;
    private javax.swing.JCheckBox checkBoxAnch;
    private javax.swing.JCheckBox checkBoxAE;
    private javax.swing.JCheckBox checkBoxUni;
    private javax.swing.JCheckBox checkBoxProfIter;
    private javax.swing.JCheckBox checkBoxEscalada;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel etiquetaEstado;
    private javax.swing.JLabel etiquetaConsola;
    private javax.swing.JLabel etiquetaProf;
    private javax.swing.JLabel etiquetaAlgor;
    private javax.swing.JScrollPane scrollPaneTexto;
    private javax.swing.JTextArea textoConsola;
    
    /**
	 * Instancia por defecto de Visual
	 */
	public Visual() {
    	n = 2;
        z = 1;
        cargado = false;
        dibuja();
        centrarVentana();
    }
    
    /**
     * Instancia de visual para un EdificioCubico de dimension dimXdimXdim
     * @param dim
     */
	public Visual(int dim){
    	n = dim;
    	z = 1;
    }
    
    /**
     * Copia sobre el objeto actual los atributos del objeto v 
     * @param v Visual a copiar
     */
	public void copia(Visual v){
    	n = v.n;
		z = v.z;
		controlador = v.controlador;
		mensaje = v.mensaje;
		cargado = v.cargado;
		nombreArchivoCargado = v.nombreArchivoCargado;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				edificio[i][j] = v.edificio[i][j];
			}
		}
		textoProfAct = v.textoProfAct;
		textoAlgoritmo = v.textoAlgoritmo;
		botonZoomMas = v.botonZoomMas;
		botonZoomMenos = v.botonZoomMenos;
		botonAbrir = v.botonAbrir;
		botonEjecutar = v.botonEjecutar;
		checkBoxProf = v.checkBoxProf;
		checkBoxAnch = v.checkBoxAnch;
		checkBoxAE = v.checkBoxAE;
		checkBoxUni = v.checkBoxUni;
		checkBoxProfIter = v.checkBoxProfIter;
		checkBoxEscalada = v.checkBoxEscalada;
		jDesktopPane1 = v.jDesktopPane1;
		etiquetaEstado = v.etiquetaEstado;
		etiquetaConsola = v.etiquetaConsola;
		etiquetaProf = v.etiquetaProf;
		etiquetaAlgor = v.etiquetaAlgor;
		scrollPaneTexto = v.scrollPaneTexto;
		textoConsola = v.textoConsola;
    }
    
    /**
	 * Actualiza la interfaz rellenando con la informacion de una posible ruta de salida
	 * coloreando las casillas por las que pasa
	 * @param ruta Posible ruta de salida del EdificioCubico
	 */
	public void rellena(ArrayList<int[]> ruta){
        // Reiniciamos las casillas 
    	for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
            	edificio[i][j].setText("");
            	edificio[i][j].setBackground(new Color(255, 255, 255));
            }
    	}
    	// Actualizamos
    	if (ruta != null)
			salida = ruta;
		if (salida != null) {
			for (int i = 0; i < salida.size(); i++) {
				if (salida.get(i)[2] + 1 == z)
					edificio[salida.get(i)[0]][salida.get(i)[1]]
							.setBackground(new Color(204, 255, 204));
			}
			if (controlador.getEdificio().getActZ() + 1 == z)
				edificio[controlador.getEdificio().getActX()][controlador
						.getEdificio().getActY()]
						.setBackground(new java.awt.Color(204, 255, 204));
			if (salida.get(0)[2] + 1 == z)
				edificio[salida.get(0)[0]][salida.get(0)[1]].setText("X");
		} else if (controlador.getEdificio() != null
				&& controlador.getEdificio().getActZ() + 1 == z)
			edificio[controlador.getEdificio().getActX()][controlador.getEdificio().getActY()].setText("X");
    }
    
    /**
     * Este metodo mira si se ha seleccionado solo una estratefia
     * @return cierto si todo es correcto
     */
	public boolean comprueba(){
        boolean cierto = false;
		int cont = 0;
		boolean[] vector = new boolean[6];
		// inicializamos vector
		for (int i = 0; i < 6; i++) {
			vector[i] = false;
		}
		// cogemos los valores de los check
		vector[0] = checkBoxProf.isSelected();
		vector[1] = checkBoxAnch.isSelected();
		vector[2] = checkBoxAE.isSelected();
		vector[3] = checkBoxUni.isSelected();
		vector[4] = checkBoxProfIter.isSelected();
		vector[5] = checkBoxEscalada.isSelected();
		for (int i = 0; i < 6; i++)
			if (vector[i] == true)
				cont++;
		if (cont == 1)
			cierto = true;
		else
			cierto = false;
		return cierto;
    }
    
    /**
     * Este metodo inicializa los atributos de la interfaz
     */
	public void dibuja(){
    	jDesktopPane1 = new javax.swing.JDesktopPane();
        botonZoomMas = new javax.swing.JButton();
        botonZoomMenos = new javax.swing.JButton();
        scrollPaneTexto = new javax.swing.JScrollPane();
        textoConsola = new javax.swing.JTextArea();
        etiquetaEstado = new javax.swing.JLabel();
        etiquetaConsola = new javax.swing.JLabel();
        textoProfAct = new javax.swing.JTextField();
        etiquetaProf = new javax.swing.JLabel();
        textoAlgoritmo = new javax.swing.JTextField();
        etiquetaAlgor = new javax.swing.JLabel();
        checkBoxProf = new javax.swing.JCheckBox();
        checkBoxAnch = new javax.swing.JCheckBox();
        checkBoxAE = new javax.swing.JCheckBox();
        checkBoxUni = new javax.swing.JCheckBox();
        checkBoxProfIter = new javax.swing.JCheckBox();
        checkBoxEscalada = new javax.swing.JCheckBox();
        botonAbrir = new javax.swing.JButton();
        botonEjecutar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jDesktopPane1.setBackground(new Color(204, 204, 255));
        int x=20;
        int y=80;
        edificio=new JTextField[n][n];
        // Creamos las habitaciones del edificio
        for (int i=0;i<n;i++) {
            if(i!=0)
                y=y+30;
            // Colocamos las casillas
            for(int j=0;j<n;j++){
                edificio[i][j]=new javax.swing.JTextField();
                edificio[i][j].setBounds(x,y,30,30);
                edificio[i][j].setHorizontalAlignment(JTextField.CENTER);
                edificio[i][j].setEditable(false);
                edificio[i][j].setBackground(Color.WHITE);
                jDesktopPane1.add(edificio[i][j],javax.swing.JLayeredPane.DEFAULT_LAYER);
                // Actualizamos las variables de posicionamiento
                x=x+30;
                // Si llegamos al final de la fila, reiniciamos la x
                if (j==n-1)
                    x=20;
            }
        }
        // Ahora ponemos los botones zoom + y zoom -
        botonZoomMas.setText("Zoom +");
        botonZoomMas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                oyenteZoomMas(evt);
            }
        });

        botonZoomMas.setBounds(edificio[n-1][n-1].getX()+50,edificio[0][n-1].getY(), 80, 23);
        jDesktopPane1.add(botonZoomMas, javax.swing.JLayeredPane.DEFAULT_LAYER);

        botonZoomMenos.setText("Zoom -");
        botonZoomMenos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                oyenteZoomMenos(evt);
            }
        });

        botonZoomMenos.setBounds(edificio[n-1][n-1].getX()+50, edificio[n-1][n-1].getY()+4, 80, 23);
        jDesktopPane1.add(botonZoomMenos, javax.swing.JLayeredPane.DEFAULT_LAYER);
         
        // Titulo principal
        etiquetaEstado.setText("Estado de las Habitaciones");
        etiquetaEstado.setBounds(20, 20, 170, 14);
        jDesktopPane1.add(etiquetaEstado, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
        etiquetaProf.setText("Profundidad del cubo");
        etiquetaProf.setBounds(etiquetaEstado.getX(), etiquetaEstado.getY()+30, 120, 14);
        jDesktopPane1.add(etiquetaProf, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
        textoProfAct.setText(""+z);
        textoProfAct.setBounds(etiquetaProf.getX()+125,etiquetaProf.getY()-2, 20, 20);
        jDesktopPane1.add(textoProfAct, javax.swing.JLayeredPane.DEFAULT_LAYER);

        // Resto de componentes
        etiquetaAlgor.setText("Algoritmo Actual");
        etiquetaAlgor.setBounds(botonZoomMas.getX()+200, 50, 100, 14);
        jDesktopPane1.add(etiquetaAlgor, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
        textoAlgoritmo.setBounds(botonZoomMas.getX()+200, 70, 160, 20);
        jDesktopPane1.add(textoAlgoritmo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
        
        checkBoxProf.setText("Profundidad");
        checkBoxProf.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkBoxProf.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkBoxProf.setBounds(textoAlgoritmo.getX(),textoAlgoritmo.getY()+35, 90, 15);
        jDesktopPane1.add(checkBoxProf, javax.swing.JLayeredPane.DEFAULT_LAYER);

        checkBoxAnch.setText("Anchura");
        checkBoxAnch.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkBoxAnch.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkBoxAnch.setBounds(textoAlgoritmo.getX(), checkBoxProf.getY()+20, 80, 15);
        jDesktopPane1.add(checkBoxAnch, javax.swing.JLayeredPane.DEFAULT_LAYER);

        checkBoxAE.setText("aEstrella");
        checkBoxAE.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkBoxAE.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkBoxAE.setBounds(textoAlgoritmo.getX(),checkBoxAnch.getY()+20, 80, 15);
        jDesktopPane1.add(checkBoxAE, javax.swing.JLayeredPane.DEFAULT_LAYER);

        checkBoxUni.setText("Uniforme");
        checkBoxUni.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkBoxUni.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkBoxUni.setBounds(textoAlgoritmo.getX(), checkBoxAE.getY()+20, 80, 15);
        jDesktopPane1.add(checkBoxUni, javax.swing.JLayeredPane.DEFAULT_LAYER);

        checkBoxProfIter.setText("Profundidad iterativa");
        checkBoxProfIter.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkBoxProfIter.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkBoxProfIter.setBounds(textoAlgoritmo.getX(), checkBoxUni.getY()+20, 150, 15);
        jDesktopPane1.add(checkBoxProfIter, javax.swing.JLayeredPane.DEFAULT_LAYER);

        checkBoxEscalada.setText("Escalada");
        checkBoxEscalada.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkBoxEscalada.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkBoxEscalada.setBounds(textoAlgoritmo.getX(), checkBoxProfIter.getY()+20, 80, 15);
        jDesktopPane1.add(checkBoxEscalada, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
        botonAbrir.setText("Abrir");
        botonAbrir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                oyenteAbrir(evt);
            }
        });
        botonAbrir.setBounds(edificio[n-1][n-1].getX(),botonZoomMenos.getY()+60, 90, 23);
        jDesktopPane1.add(botonAbrir, javax.swing.JLayeredPane.DEFAULT_LAYER);

        botonEjecutar.setText("Ejecutar");
        botonEjecutar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                oyenteEjecutar(evt);
            }
        });
        botonEjecutar.setBounds(botonAbrir.getX()+100, botonZoomMenos.getY()+60, 90, 23);
        jDesktopPane1.add(botonEjecutar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
        etiquetaConsola.setText("Consola");
        etiquetaConsola.setBounds(20,botonAbrir.getY()+40, 140, 20);
        jDesktopPane1.add(etiquetaConsola, javax.swing.JLayeredPane.DEFAULT_LAYER);
        
        textoConsola.setColumns(20);
        textoConsola.setRows(5);
        scrollPaneTexto.setViewportView(textoConsola);

        scrollPaneTexto.setBounds(20,etiquetaConsola.getY()+20, 970, 400);
        jDesktopPane1.add(scrollPaneTexto, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 712, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
        );
        pack();
        
        // Inicializaciones locales
        this.setSize(1025,780);
        this.setVisible(true);
        this.setResizable(false);
        botonEjecutar.setEnabled(cargado);
        botonZoomMas.setEnabled(z<n);
        botonZoomMenos.setEnabled(z>1);
        setTitle(titulo + "    " + (cargado?nombreArchivoCargado:""));
    }
    
    /**
	 * Asocia un controlador a la vista actual para que haya una comunicacion entre ellos
	 * @param cont que se asocia a la vista
	 */
	public void asociarControlador(Controlador cont){
		controlador = cont;
	}
	
	/**
	 * Genera una solicitud de estrategia al usuario para resolver cada una de las habitaciones
	 * @return el numero de estrategia
	 */
	public int solicitud(){
		int juego=0;
		if (checkBoxProf.isSelected())
			juego=1;
		else if (checkBoxAnch.isSelected())
			juego=2;
		else if (checkBoxAE.isSelected())
			juego=3;
		else if (checkBoxUni.isSelected())
			juego=4;
		else if (checkBoxProfIter.isSelected())
			juego=5;
		else
			juego=6;
		return juego;
	}
	
	/**
	 * Muestra un mensjae por pantalla
	 * @param s mensaje que se muestra por pantalla
	 */
	public void mostrar(String s){		
		mensaje += s;
		textoConsola.setText(mensaje);
	}
	
	/**
	 * Limpia la consola de la interfaz
	 */
	public void limpiar(){
		textoConsola.cut();
	}
	
    /**
     * Responde a la pulsacion sobre el boton Ejecutar 
     * @param evt Evento a capturar
     */
	private void oyenteEjecutar(java.awt.event.MouseEvent evt) {        
		if (botonEjecutar.isEnabled()){
	    	limpiar();
	    	int estrategia=0;
	        if (!comprueba()){//comprobamos si no hay error
	            JOptionPane.showMessageDialog(this,"Seleccione solo una opción","Error",JOptionPane.ERROR_MESSAGE);
	            checkBoxProf.setSelected(false);//deseleccionamos todas las opciones para que vuelva elegir
	            checkBoxAnch.setSelected(false);
	            checkBoxAE.setSelected(false);
	            checkBoxUni.setSelected(false);
	            checkBoxProfIter.setSelected(false);  
	            checkBoxEscalada.setSelected(false); 
	        } else {//miramos que opcion se ha seleccionado
	            estrategia=solicitud();
	            if (estrategia==1){
					mostrar("EMPIEZA EL JUEGO\n");
					mostrar("Busqueda en profundidad\n");
					textoAlgoritmo.setText("Busqueda en profundidad");
					controlador.jugar(1);
					
				//aplicacion ejecutar con busqueda 2
				} else if(estrategia==2){
					mostrar("EMPIEZA EL JUEGO\n");
					mostrar("Busqueda en anchura\n");
					textoAlgoritmo.setText("Busqueda en Anchura");
					controlador.jugar(2);
				
				//aplicacion ejecutar con busqueda 3
				} else if(estrategia==3){
					mostrar("EMPIEZA EL JUEGO\n");
					mostrar("Busqueda en A*\n");
					textoAlgoritmo.setText("Busqueda en A*");
					controlador.jugar(3);
				
				//aplicacion ejecutar con busqueda 4
				} else if(estrategia==4){
					mostrar("EMPIEZA EL JUEGO\n");
					mostrar("Busqueda uniforme\n");
					textoAlgoritmo.setText("Busqueda Uniforme");
					controlador.jugar(4);
					
				//aplicacion ejecutar con busqueda 5
				} else if(estrategia==5){
					mostrar("EMPIEZA EL JUEGO\n");
					mostrar("Busqueda en profundidad iterativa\n");
					textoAlgoritmo.setText("Busqueda en profunidad iterativa");
					controlador.jugar(5);
					
				//aplicacion ejecutar con busqueda 6
				} else {
					mostrar("EMPIEZA EL JUEGO\n");
					mostrar("Busqueda en escalada\n");
					textoAlgoritmo.setText("Busqueda en escalada");
					controlador.jugar(6);
				}
	        }
	        rellena(null);
        }
    }                                     

    /**
     * Responde a la pulsacion sobre el boton Abrir
     * @param evt Evento a capturar
     */
	private void oyenteAbrir(java.awt.event.MouseEvent evt) {                                      
    	limpiar();
    	//Abrimos el navegador de archivos
    	JFileChooser selector = new JFileChooser();
		selector.setCurrentDirectory(new File("."));
		selector.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int opcion = selector.showOpenDialog(null);
        if (opcion == JFileChooser.APPROVE_OPTION){
        	File archivo = selector.getSelectedFile();
        	String ruta = archivo.getAbsolutePath();
        	try  {
        		EdificioCubico edi = new EdificioCubico(controlador);
        		CargarEdificio.cargarEdificio(edi, ruta);
        		if (edi.getDimension() <= DIMENSION_MAXIMA){
	        		Visual v = new Visual(edi.getDimension());
	        		v.cargado = true;
	        		v.nombreArchivoCargado = archivo.getName();
	        		v.controlador = controlador;
	        		controlador.asociarVista(v);
	        		controlador.cargar(edi);
	        		v.dibuja();
	        		v.centrarVentana();
	        		dispose();
	        		copia(v);
        		}
        		else {
        			JOptionPane.showMessageDialog(this, "Dimension maxima = " + DIMENSION_MAXIMA, "ERROR", JOptionPane.ERROR_MESSAGE);
        		}
        	} catch(Exception ex){
        		limpiar();
        		mostrar("Imposible abrir el archivo");
        	}
        }
    }     
    
    /**
     * Vacia la ventana
     */
	public void vaciar(){
    	this.setVisible(false);
    	this.removeAll();
    }
    
	/**
     * Responde a la pulsacion sobre el boton Zoom+
     * @param evt Evento a capturar
     */
	private void oyenteZoomMas(java.awt.event.MouseEvent evt) {
		if (botonZoomMas.isEnabled()){
	        z=z+1;
	        if(z>n){
	            z=n;
	        }
	        if (z==n)
	        	botonZoomMas.setEnabled(false);
	        botonZoomMenos.setEnabled(true);
	        textoProfAct.setText(""+z);
	        rellena(null);
		}
    }                                     

	/**
     * Responde a la pulsacion sobre el boton Zoom-
     * @param evt Evento a capturar
     */
	private void oyenteZoomMenos(java.awt.event.MouseEvent evt) {
		if (botonZoomMenos.isEnabled()){
	        z=z-1;
	        if(z==0){
	            z=1;
	        }
	        if (z==1)
	        	botonZoomMenos.setEnabled(false);
	        botonZoomMas.setEnabled(true);
	        textoProfAct.setText(""+z);
	        rellena(null);
        }
    }                                     
    
    /**
     * Consulta la dimension de la visual 
     * @return dimension
     */
	public int getN() {
		return n;
	}
    
	/**
     * Actualiza la dimension de la visual 
     * @param n Nueva dimension
     */
	public void setN(int n) {
		this.n = n;
	}
	
	/**
	 * Centra la ventana en pantalla
	 */
	private void centrarVentana(){
	   	try {
	        Dimension ventana = Toolkit.getDefaultToolkit().getScreenSize();
	        int alto = ventana.height;
	        int ancho = ventana.width;
	        this.setLocation(ancho/2-this.getWidth()/2, alto/2-this.getHeight()/2);
	    } catch (Exception e) {
	    	this.setLocation(0,0);
	    }
	}
    
}
