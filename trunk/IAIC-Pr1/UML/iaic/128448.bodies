class Controlador
!!!144064.java!!!	getEdificio() : EdificioCubico

		return edificio;
!!!144192.java!!!	setEdificio(inout edificio : EdificioCubico) : void

		this.edificio = edificio;
!!!144320.java!!!	Controlador()
		
!!!144448.java!!!	asociarVista(inout vist : Visual) : void

		vista = vist;
!!!144576.java!!!	jugar(in n : int) : void

        
		if (n==1){
			edificio.ponNodosExpandidos(0);
			vista.mostrar("Primero en profundidad (profundidad máxima: 7):\n");
			listPath((new DepthBoundedSearch(edificio,7)).search());
			vista.mostrar("NodosExpandidos: "+edificio.dameNodosExpandidos()+"\n");
		}
		else if (n==2){
			edificio.ponNodosExpandidos(0);
			vista.mostrar("\n");
			vista.mostrar("Primero en anchura:\n");
			listPath((new BreadthFirstSearch(edificio)).search());
			vista.mostrar("NodosExpandidos: "+edificio.dameNodosExpandidos()+"\n");
		}
		else if (n==3){
			edificio.ponNodosExpandidos(0);
			vista.mostrar("\n");
			vista.mostrar("Busqueda A*:\n");
			listPath((new AStarSearch(edificio)).search());
			vista.mostrar("NodosExpandidos: "+edificio.dameNodosExpandidos()+"\n");
		}
		else if (n==4){
			edificio.ponNodosExpandidos(0);
			vista.mostrar("\n");
			vista.mostrar("Coste uniforme:\n");
			listPath((new UniformCostSearch(edificio)).search());
			vista.mostrar("NodosExpandidos: "+edificio.dameNodosExpandidos()+"\n");
		}
		else if (n==5){
			edificio.ponNodosExpandidos(0);
			vista.mostrar("\n");
			vista.mostrar("Profundidad Iterativa:\n");
			listPath((new IteratedDeepeningSearch(edificio)).search());
			vista.mostrar("NodosExpandidos: "+edificio.dameNodosExpandidos()+"\n");
		}
		else if (n==6){
			edificio.ponNodosExpandidos(0);
			vista.mostrar("\n");
			vista.mostrar("Escalada:\n");
			listPath((new GreedySearch(edificio)).search());
			vista.mostrar("NodosExpandidos: "+edificio.dameNodosExpandidos()+"\n");
			vista.mostrar("\n");
		}
!!!144704.java!!!	listPath(inout node : SearchNode) : void

    	ArrayList<String> camino = new ArrayList<String>();
    	ArrayList<int[]> salida = new ArrayList<int[]>();
    	if (node == null) {
		    vista.mostrar("No hay solución\n");
		    return;
	    }
	    String linea = "";
	    while (node.getParent()!=null) {
	    	linea =  "Estado: " + node.getState() +
           				   " Profundidad: " + node.getDepth() +
           				   " Coste: " + node.getPathCost() +
           				   " Operador: " + node.getAppliedOp();
	    	int[] posicion = new int[3];
	    	posicion[0] = ((EdificioCubico)node.getState()).getActX();
	    	posicion[1] = ((EdificioCubico)node.getState()).getActY();
	    	posicion[2] = ((EdificioCubico)node.getState()).getActZ();
	    	salida.add(posicion);
	    	linea+="\n";
	    	camino.add(linea);
	    	node = node.getParent();
	    }
	  
	    linea = ( "ESTADO INICIAL: " + node.getState());  
	    camino.add(linea);
	    vista.mostrar("\n");
	    vista.mostrar("\n");
	    vista.mostrar("CAMINO A LA SOLUCION DEL EDIFICIO:\n");
	    for(int j=camino.size()-1; j>=0;j--){
	    	vista.mostrar((String)camino.get(j));
	    }
	    vista.rellena(salida);
!!!144832.java!!!	cargar(inout edificio : EdificioCubico) : void

		this.edificio = edificio;
!!!144960.java!!!	mostrar(in s : String) : void

		vista.mostrar(s);
!!!145088.java!!!	solicitud() : int

		return vista.solicitud();
